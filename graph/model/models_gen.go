// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Account struct {
	ID          int       `json:"id"`
	Genre       *Genre    `json:"genre"`
	Amount      int       `json:"amount"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

type Analysis struct {
	Amount int `json:"amount"`
}

type Genre struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

type NewAccount struct {
	Description string `json:"description"`
	Amount      int    `json:"amount"`
	GenreID     int    `json:"genre_id"`
}

type NewGenre struct {
	Title string `json:"title"`
}

type User struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
	Role Role   `json:"role"`
}

type Role string

const (
	RoleOwner Role = "OWNER"
	RoleGuest Role = "GUEST"
)

var AllRole = []Role{
	RoleOwner,
	RoleGuest,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleOwner, RoleGuest:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
